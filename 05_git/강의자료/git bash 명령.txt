1. 초기화 (.git 폴더 만들기) <= Local Repository
  형식] git init
  ex)  git init  .    
  
  
2. 커밋 만들기 
  2.1 사용자 정보 등록하기 
  - 모든 레포지토리에 대한 사용자 정보 등록하기 
  형식] 
  git config --global user.email	"깃허브에 등록된 이메일 주소"
  git config --global user.name 	"깃에 commit할때 사용할 이름"
    
  c:/사용자/계정명/.gitconfig 파일 확인하기 

  - 특정 레포지토리에 대한 사용자 정보 등록하기 
  형식] 
  git config --local user.email	 "깃허브에 등록된 이메일 주소"
  git config --local user.name "깃에 commit할때 사용할 이름"
   
  .git>config 파일 확인하기
  
  
  2.2 설정 정보 조회
   - 전역 설정 정보 조회
	git config --global --list

   - 저장소별 설정 정보 조회
	git config --list
	
	:q 로 빠져나오기
	
   - git doc 보기 
   형식] git help 명령
   ex)  git help status
    
   file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc     
	
  2.3 staging (버전 정보 기록하기)
   - 상태 변경이 필요한 파일이 있는지 확인 
   형식] 
   git status
  
   - 파일을 staging에 추가하고 메시지 기록하기 
  형식] 
  git add 파일명            	지정한 파일만 추가
  git add 폴더명				지정한 폴더를 추가
  git add .     			현재 경로에 있는 모든 파일 추가
  git commit -m "설명"
  
  
  ****** git add . 할때 오류 발생하는 경우  
    ==> OS마다 enter에 대한 입력 데이타가 달라서 발생 
  - enter에 대한 입력 처리 하기 
  window  
  git config core.autocrlf true
  git config --global core.autocrlf true

  linux, mac
  git config core.autocrlf input
  git config --global core.autocrlf input
  
  기능 해제
  git config --global core.autocrlf false
  
  -- commit 내용 확인하기 
  git log    				commit 한 내용들이 출력된다. 
  git log --oneline			commit 한 내용을 한 라인에 출력된다.

  2.3 이전 커밋으로 돌아 가기 
  형식] 
  git checkout 커밋아이디_7자리    	--이전 커밋으로 돌아갈때 
  git checkout - 				--최신 커밋으로 돌아갈때 
  git checkout -- <file이름>		--특정 파일을 마지막 커밋 상태로 복원

  ex)
  git checkout 8d899f8


  2.4 커밋 메세지 편집하기 
   - 커밋 메세지로 사용할 템플릿 등록하기
   형식] git config --global commit.template .gitmessage.txt
   
   - 사용 방법
   git commit 만 입력하면 Vim 편집기가 뜨고 메세지 입력후 저장 및 편집기를 종료하면 commit된다. 
   입력 모드 전환	: a or i  
   종료 			: esc > :wq enter
   
   - 편집기 변경하기 
   vscode :git config --global core.editor "code --wait" 
   메모장 :git config --global core.editor "notepad"
   
   -- 확인하기 
   git config --global core.editor 
   
   
   2.5 commit 변경하기 
   원격 저장소에 push하기 전 
   마지막에 commit한 내용을 수정 => 깜박 잊고 파일 하나를 추가 또는 변경된 내용을 반영하지 않은 경우 
   공용 커밋은 변경하지 않는것이 국룰 
   
   - 가장 최근 git 커밋 메시지 변경
   git commit --amend -m "메세지"
   
   - 커밋 된 파일 변경 
   형식]	git add 파일명
		git commit --amend --no-edit                ==> --no-edit 기존 커밋 메세지를 변경하지 않기
		       
   ex)	git add a.txt
   		git commit --amend --no-edit
   
   2.6 reset
   스테이지에서 내리기
   형식] git reset <파일명>	   
   
3. 원격 저장소에 커밋 올리기
 3.1 branch  만들기
 형식]
 git branch -M branch이름
 ex) git branch -M main
 
 3.2 git 에 프로젝트 만들고 주소 복사하기
  
 3.3 원격 저장소와 연결하기 
 형식]
 git remote add origin 주소
 
 3.4 원격 저장소와 연결됐는지 확인하기 
 git remote -v 
 
 3.5 push 하기
 형식]
 git push origin branch이름
 ex) git push -u origin main
 
 -- 브라우져에서 로그인하면 데이타가 push 된다.(로그인 안된경우만)
  
 - 로칼 레파지토리와 원격 레파지토리의 파일 정보가 맞지 않는 경우 pull 명령시 오류가 발생한다. 
   이때 merge하지 않고 서버와 맞출 경우 
 형식]
 git reset --hard origin/브렌치이름
 ex)   
 git reset --hard origin/main
 
4. 원격 저장소를 로컬에 내려 받기
  4.1 clone
  형식] git clone url .   <= url 뒤에 한 칸 띄고 마침표를 해야 해당 경로에 .git 폴더가 생긴다.
  
  .git>config 확인하면   remote 정보는 있지만 user정보는 local로 설정했기때문에 없다. 
  
   
5. Branch

  5.1 Branch  생성
  형식] git branch 브랜치이름           <= 브랜치 이름은 보통 feature/기능 으로 지정한다. 
  ex) git branch feature/main_ui
  
  ex) git branch -M feature/main_ui   생성하고 이동하기
   
  5.2 branch 확인
  형식] git branch -v                 <= 리스트 확인후 :q 입력후 빠져나오기
  
  5.3 branch 이동
  형식] git checkout 브랜치이름
  형식] git switch 브랜치이름  
  형식] git switch -c 브랜치이름		브랜치 생성 후 이동
  
  ex) git checkout feature/main_ui
  ex) git switch   main
  ex) git switch -d  feature/qa


  ***정리 checkout과 switch
  git checkout <브랜치명>		 	branch로 이동
  git checkout -b <branch명>		branch 생성후 이동 
  git checkout <커밋 번호>			특정 commit으로 이동
  git checkout -				이전 commit으로 이동
  git checkout -- <파일 이름>		특정 파일을 마지막 커밋 상태로 복원 
  
  git switch   <브랜치명>		 	branch로 이동
  git switch -c <브랜치명>			branch 생성후 이동
  
  git branch -M <브랜치명>			branch 생성후 이동
  
  
  
  5.4 branch 삭제  - 해당 branch 내에서는 삭제가 안되므로 main 으로 이동 후 삭제하기  
  형식) git branch -d <branch 이름>	 merge된 branch 삭제
  형식) git branch -D <branch 이름>	 merge 되지 않은 branch 삭제
  
  ex) git checkout main
      git branch -d feature/qa
  
  
  5.4 branch에 push하기 
  형식] git push origin <branch 이름>  
  ex) 
  - main.html생성 후  branch 에 파일 추가 메세지입력은 기존과 동일 
  	git add .
	git add <파일 이름>
	git commit -m "메세지 입력"
  	git push origin feature/main_ui  <= github에서 확인하면 branch에만 파일이 올라가 있다. 
  
6. merge 하기
  6.1 브랜치 상태 확인하기 
  checkout한 브랜치를 기준으로 --merged, --no-merged  옵션을 사용하여 merged가 된 브랜치인지 확인 가능 
  형식] git branch --merged
  형식] git branch --no-merged
  
  6.2 merge하기 
  형식] git merge <브랜치 이름>
  ex) git merge featuer/main_ui
      git push origin main         <= 머지한 내용을 원격 저장소에 반영하기     

  ***fast forward : 같은 파일을 수정하지 않고 다른 내용을 추가한 경우 충돌 없이 merge가 된다. 	
   
  ***충돌 해결하기 
     파일 수정 후 push
     git push origin main
     
7. cherry pick
    체리 픽은 특정 커밋 하나만 선택해서 다른 브랜치에 적용하는 Git 명령
    🔹 긴급 패치(Hotfix): 버그 수정 커밋을 바로 배포 브랜치(main)로 가져와야 할 때
	🔹 특정 기능만 적용: 여러 기능이 섞인 브랜치에서 원하는 기능의 커밋만 가져오고 싶을 때
	🔹 개발 브랜치 관리: 협업 중 특정 브랜치에서 유용한 커밋을 내 브랜치에도 적용하고 싶을 때
    	        
   🔹 개발 브랜치 관리    	        
   커밋 확인하기 
   형식] git log --oneline <branch이름>
   ex)  git log --oneline origin/feature/user
   
   적용할 branch로 이동하기 
   ex) git switch featuer/notice
   
   체리 픽
   형식] git cherry-pick <커밋해쉬>
   ex) git cherry-pick 673k21 
   
   
8. tagging
   특정 commit을 tag할 수 있다. 
   수백개의 commit 중에서 tag를 통해 중요 지점을 간절하게 확인할 수 있다. 
   주로 버전 정보 표시
   commit과 tag의 차이점은 commit은 checkout를 통해 이전 버전으로 수정할 수 있지만
   tag는 수정이 불가능 하며 읽기 전용 커밋 같은 개념이다. 
   보통 태그는 소프트웨어의 버전을 릴리즈 할 때 사용한다. 
 	        
   태그 종류 
   Lightweight 
    - 특정 커밋을 가르키는 역할 
    - 단순히 버전 같은 태그 이름만 남기는 태그 
   
   Annotated
    - 만든 사람, 이메일, 날짜, 메시지를 객체로 따로 저장한다. 
    - GPU(GNU privacy Guard)로 서명할 수 있따. 
    - Lightweight 태그와 달리 고유의 저장 공간이 생긴다.         
 	        
   8.1 Lightweight  태그 생성 
   형식] git tag <태그이름>
   ex) git tag v1.0
   
   8.2 이전 commit을 조회 해서 태그 지정하기
   형식] git tag <태그이름> <커밋번호>
   
   ex)
   		git log
   		git tag v1.0.01  72e74       main.html 추가하는  commit
   
      	        	
   8.3 태그 조회 
   형식] git tag       or git tag -l  '확인할 버전 정보'
 
   ex) git tag -1 'v1*'
   
   8.4 Annotated 태그 생성 
   형식] git tag -a <태그이름> -m "태그 메세지"
   형식] git tag -a <태그이름> <커밋 번호>
   
   
   8.5 tag push 하기 
   형식] git push origin <태그이름>
   ex)  git push origin v1.0.01
   
   
   오른쪽 Releases에서 태그를 확인할 수 있다. 
   

****100M가 이상 되는 파일이 있어서  push 오류가 발생한 경우 
- 100M 이상 되는 파일을 찾기 
git ls-tree -r HEAD | awk '$3=="blob" {print $4, $5}' | sort -nr | awk '$1 > 100000000 {print $2, $1}'

- 출력 내용이 없는 경우 커밋되지 않는 대용량 파일이 
find . -type f -size +100M


gitignore.io
    
    
pull request    
https://wayhome25.github.io/git/2017/07/08/git-first-pull-request-story/    

소스트리
https://www.sourcetreeapp.com/      