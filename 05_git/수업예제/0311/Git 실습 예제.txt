0. 같은 사람이 물리적으로 다른 두 곳에서 사용하기 
 - git으로 사용할 eureka1 폴더 만들기


1. 초기화 (.git 폴더 만들기) <= Local Repository
  형식] git init
  ex)  git init  .    
  	   ls -a			 //-a 숨긴 디렉토리까지 확인
  	   pwd				 //현재 경로 확인
2. 커밋 만들기 
  2.1 사용자 정보 등록하기 
  
  - 모든 레포지토리에 대한 사용자 정보 등록하기 
  형식] 
  git config --global user.email	"깃허브에 등록된 이메일 주소"
  git config --global user.name 	"깃에 commit할때 사용할 이름"
  git config --global user.email 	"kdgfox@gmail.com"
  git config --global user.name 	"kdgfox"
  
  git config --global --list       :q로 빠져나오기
 
  c:/사용자/계정명/.gitconfig 파일 확인인 후 삭제하기  => mac은 다름  
	-- 사용자 이메일을 선택하여 삭제
	git config --global --unset user.email 사용자이메일
	
	-- 전체 사용자 이메일 삭제
	git config --global --unset-all user.email 
  

	-- 사용자 이름을 선택하여 삭제
	git config --global --unset user.name 사용자이름
	
	-- 전체 사용자 이름 삭제
	git config --global --unset-all user.name

  - 특정 레포지토리에 대한 사용자 정보 등록하기 
  형식] 
  git config --local user.email	 	"깃허브에 등록된 이메일 주소"
  git config --local user.name 		"깃에 commit할때 사용할 이름"
  git config --local user.email 	"kdgfox@gmail.com"
  git config --local user.name 		"kdgfox"
  
  git config --list					:q로 빠져나오기
  
  .git>config 파일 확인하기
  
  
  2.2 설정 정보 조회
   - 전역 설정 정보 조회
	git config --global --list

   - 저장소별 설정 정보 조회
	git config --list
	
	:q 로 빠져나오기
	
   - git doc 보기 
   형식] git help 명령
   ex)  git help status
    
   file:///C:/Program%20Files/Git/mingw64/share/doc/git-doc     
	
  2.3 staging (버전 정보 기록하기)
  파일 상태 
  untrackted	: LocalRepository 내에 파일 만들어져 있고 git이 버전을 추적할 수 없는 상태
  track			: 파일을 git이 버전 추적을 할 수있는 상태 
    Staged 		: git add 명령어를 이용하여 파일을 staging 한 상태
    Unmodified	: git commit 명령어를 통해 버전을 버전 관리를 할 수 있는 상태 
    Modified	: Unmodified된 파일을 수정만 한 상태 => add, commit이 필요한 파일
  
   - Readme.txt 파일 만들기
   - 상태 변경이 필요한 파일이 있는지 확인 
   형식] 
  git status
  
  Readme.txt파일이 untrackted(빨간색으로 표시) 
 
   - 파일을 staging에 추가 
  형식] 
  git add 파일명            		지정한 파일만 추가
  git add 폴더명					지정한 폴더를 추가
  git add .     				현재 경로에 있는 모든 파일 추가
 
  - 스테이지에서 내리기
   형식] git reset <파일명>	   

   ex) 
   git reset readme.txt
   git status
   git add . 
  
  
   - 하고 메시지 기록하기
  git commit -m "설명"
  
  ex) 
  git add .
  git status					readme.txt이 track(추적상태)		
  git commit -m "DOCS: readme.txt add v1"
  git status					commit되서 아무것도 없다.
  
  - commit한 내용 살펴보기 
  git log    					commit 한 내용들이 출력된다. 
  git log --oneline				commit 한 내용을 한 라인에 출력된다.
  	
  -----리드미 파일 수정하기 하기
  git status
  git add .
  git status
  git commit -m "DOCS: readme.txt update v2"
  git status
 

  2.3 이전 커밋으로 돌아 가기 
  형식] 
  git checkout 커밋아이디_7자리    	--이전 커밋으로 돌아갈때 
  git checkout - 				--최신 커밋으로 돌아갈때 
  git checkout -- <file이름>		--특정 파일을 마지막 커밋 상태로 복원


  ex)
  git checkout 8d899f8			-- v1으로 돌아가기 
  git checkout -				-- v2로 돌아가기 
  								-- readme.txt 파일을 수정하기 
  git checkout -- readme.txt	-- readme.txt를 v2로 돌아가기
  
  2.4 커밋 메세지 편집하기 
   - 커밋 메세지로 사용할 템플릿 등록하기
   	 2.4.1  .git 디렉토리와 같은 경로에 .gitmessage.txt 복사하기 
   	 2.4.2  .gitmessage.txt 를 git에 등록하기   
   	 형식] git config --global commit.template .gitmessage.txt
   
     ReadMe.md 파일 작성 
   - 사용 방법
   git commit 만 입력하면 Vim 편집기가 뜨고 메세지 입력후 저장 및 편집기를 종료하면 commit된다. 
   입력 모드 전환	: a or i  
   종료 			: esc > :wq enter
   
   - 편집기 변경하기 
   vscode		:git config --global core.editor "code --wait" 
   window 메모장  :git config --global core.editor "notepad"
   mac TextEdit :git config --global core.editor "TextEdit"
   
   -- 확인하기 
   git config --global core.editor 
   
   
   test하기>
   ReadMe.md  파일 수정하기 
   git add .
   git commit				==> 메세지 편집하고 종료하면 commit 된다. 
   
   
   2.5 commit 변경하기 
   원격 저장소에 push하기 전 
   마지막에 commit한 내용을 수정 => 깜박 잊고 파일 하나를 추가 또는 변경된 내용을 반영하지 않은 경우 
   공용 커밋은 변경하지 않는다. 
   
   - 가장 최근 git 커밋 메시지 변경
   git commit --amend -m "메세지"
   
   - 커밋 된 파일 변경 
   형식]	git add 파일명
		git commit --amend --no-edit                ==> --no-edit 기존 커밋 메세지를 변경하지 않기
	
	    ReadMe.md 파일 수정하기 						==> 업무 분장 표 작성 	       
   ex)	git add ReadMe.md
   		git commit --amend --no-edit
   

      
3. 원격 저장소에 커밋 올리기
 3.1 branch  만들기
 형식]
 git branch -M branch이름
 ex) git branch -M main
 
 3.2 git 에 프로젝트 만들고 주소 복사하기
  
 3.3 원격 저장소와 연결하기 
 형식]
 git remote add origin 주소
 
 3.4 원격 저장소와 연결됐는지 확인하기 
 git remote -v 
 
 3.5 push 하기
 형식]
 git push origin branch이름
 ex) git push -u origin main	-u : 처음 push할때 branch 설정하면 default branch로 설정된다.
 									 이후는 git push만 하면 기본 설정된곳으로 push 한다.  
 
 -- 브라우져에서 로그인하면 데이타가 push 된다.(로그인 안된경우만)
  
 - 로칼 레파지토리와 원격 레파지토리의 파일 정보가 맞지 않는 경우 pull 명령시 오류가 발생한다. 
   이때 merge하지 않고 서버와 맞출 경우 
 형식]
 git reset --hard origin/브렌치이름
 ex)   
 git reset --hard origin/main
 
 
    
4. 원격 저장소를 로컬에 내려 받기 (새로운 디렉토리(eureka2) 만들어서 테스트하기)
  4.1 clone
  형식] git clone url .   <= url 뒤에 한 칸 띄고 마침표를 해야 해당 경로에 .git 폴더가 생긴다.
  
  .git>config 확인하면   remote 정보는 있지만 user정보는 local로 설정했기때문에 없다. 
  
  git config --local user.email 	"kdgfox@gmail.com"
  git config --local user.name 		"kdgfox"
  
  4.2 Readme 파일 변경해서 push
  git add .
  git commit -m "DOCS: readme.md update"    
  git push origin main
  
  4.3 eureka1 디렉토리에서 pull 받기 
  git pull origin main  => 리드미 파일 열어 변경된 내용 확인 	
  
5. Branch
  5.1 Branch  생성
  eureka2에서 브렌치 생성하기  
  형식] git branch 브랜치이름           <= 브랜치 이름은 보통 feature/기능 으로 지정한다. 
  ex)
  eureka2:main>
  git branch -M develop
  git push origin develop
  git branch -M feature/main_ui   생성하고 이동하기
   
  5.2 branch 확인
  형식] git branch -v                 <= 리스트 확인후 :q 입력후 빠져나오기
  
  5.3 branch 이동
  형식] git checkout 브랜치이름
  형식] git switch 브랜치이름  
  형식] git switch -c 브랜치이름		브랜치 생성 후 이동
  
  ex) 
  git checkout 		develop
  git switch   		main
  git switch -c  	feature/qna
  git checkout -b  	feature/notice

  ***정리 checkout과 switch
  git checkout <브랜치명>		 	branch로 이동
  git checkout -b <branch명>		branch 생성후 이동 
  git checkout <커밋 번호>			특정 commit으로 이동
  git checkout -				이전 commit으로 이동
  git checkout -- <파일 이름>		특정 파일을 마지막 커밋 상태로 복원 
  
  git switch   <브랜치명>		 	branch로 이동
  git switch -c <브랜치명>			branch 생성후 이동
  
  git branch -M <브랜치명>			branch 생성후 이동
  
  
  
  5.4 branch 삭제  - 해당 branch 내에서는 삭제가 안되므로 main 으로 이동 후 삭제하기  
  형식) git branch -d <branch 이름>	 merge된 branch 삭제
  형식) git branch -D <branch 이름>	 merge 되지 않은 branch 삭제
  
  ex) git branch -d feature/qan			//현재 qna라서 삭제 안됨
  	  git checkout main
      git branch -d feature/qa
  
  
  5.4 branch에 push하기 
  형식] git push origin <branch 이름>  
  ex) 
  - main.html생성 후  branch 에 파일 추가 메세지입력은 기존과 동일 
  	git add .
	git commit
  	git push -u origin feature/main_ui  // github에서 확인하면 branch에만 파일이 올라가 있다. 
  
  - feature-list.md생성 후
  	git commit  
	git push 							// feature/main_ui에 push됨.
  
6. merge 하기
  6.1 브랜치 상태 확인하기 
  checkout한 브랜치를 기준으로 --merged, --no-merged  옵션을 사용하여 merged가 된 브랜치인지 확인 가능 
  형식] git branch --merged
  형식] git branch --no-merged
    
  [feature/main_ui]에서 확인하면 ,main.html이  feature/main_ui에서 push했기때문에 merged할 내용이 없다. 
  git branch --merged   
  
  [main]에서 확인하면 feature/main_ui를 머지할 대상으로 보인다. 
  git switch develop
  git branch --merged   		=> main, develop 만 나온다 ==> 둘은 머지할 내용이 없다. 
  git branch --no-merged		=> develop 입장에서 feature/main_ui가 머지할 대상
  
  
  6.2 merge하기 
  형식] git merge <브랜치 이름>
  ex) git merge featuer/main_ui
      git push origin develop         <= 머지한 내용을 원격 저장소 develop에 반영하기     

  ***fast forward : 같은 파일을 수정하지 않고 다른 내용을 추가한 경우 충돌 없이 merge가 된다. 	
  eureka1:main>
    git pull origin develop 
   
   
  ***충돌 해결하기 
  6.2.1 각각의 branch에서 feature-list.md 수정하기  
    eureka2:feature/main_ui> 
    		 main2.html   					수정하기 
             feature-list.md				수정하기 
             git add main2.html
             git commit -m "main2.html add"
             git add.
             git commit -m "feature-list.md update"
             git push origin feature/main_ui
             
    eureka1:develop> git branch -M feature/user     -M 생성후 해당 branch로 이동
    eureka1:feature/user>
    		 user.html 								추가하기
             feature-list.md						수정하기
             git add user.html 
             git commit -m "user.html add"
             git add .
             git commit -m "feature-list.md update"
             git push origin feature/user
             
  6.2.2 main에서 merge하기 
  
   	eureka2:feature/main_ui>
   			git switch develop
   	eureka2:develop>		 
   			git branch --no-merge
            git merge feature/main_ui
            git push origin develop            
   
    eureka1:feature/user> 
    		git switch develop
	eureka1:develop>    		
    		git pull origin develop			feature-list.md 파일 확인하면 eureka2에서 수정됨  
    	    git branch --no-merge
    	    git merge feature/user			==> automatic merge failed 발생
    	    
    	    파일 수정 후 push
    	    git add feature-list.md
    	    git commit -m "충동 해결"
    	    git push origin develop