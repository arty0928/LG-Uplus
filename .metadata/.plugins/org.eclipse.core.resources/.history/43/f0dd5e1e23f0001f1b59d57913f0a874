package graph_0219;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.StringTokenizer;

/*
 * DFS 
 * 		1. Origin, New map을 만든다.
 * 		2. for문 돌면서 방문 x && 1이면 dfs 시작.
 * 			lastCount += cnt;
 * 		
 * 		dfs
 * 			방문처리
 * 			사방 처리 :
 * 				!방문 && 1이면 
 * 					cnt ++;
 * 					dfs()
 * 				
 */
public class Main_2636_G4_치즈_prc {

	static int[][] originMap, newMap;
	static boolean[][] visited;
	static int N,M;
	
	static int[] dy = {-1,1,0,0}, dx = {0,0,-1,1};
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		
		originMap = new int[N][M];
		visited = new boolean[N][M];
		
		for (int i = 0; i < N; i++) {
			st = new StringTokenizer(br.readLine(), " ");
			
			for (int j = 0; j < M; j++) {
				originMap[i][j] = Integer.parseInt(st.nextToken());
			}
		}
				
		newMap = new int[N][M];
		int lastCount = 0;
		int turn = 0;
		
		while(true) {
			
			turn++;
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					
					if(!visited[i][j] && originMap[i][j] == 1) {
						dfs(i,j);
					}
				}
			}
			
			// 원본 업데이트
//			for (int i = 0; i < N; i++) {
//				originMap[i] = Arrays.copyOf(newMap[i], M);
//			}
			
			int remainCount = 0;
			
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < M; j++) {
					if(newMap[i][j] == 1) remainCount++;
				}
			}
			
			if(remainCount == 0) break;
			lastCount = remainCount;
			
			//newMap 초기화
			for (int i = 0; i < N; i++) {
				Arrays.fill(newMap[i], 0);
			}
			
		}
		
		System.out.println((turn + 1));
		System.out.println(lastCount);
		
		
	}
	
	static void dfs(int y, int x) {
		visited[y][x] = true;
		
		int ny, nx = 0;

		/*
		 * 인전합 치즈 개수 세기
		 */
		int count = 0;  //상하좌우 인접한 치즈의 개수
		for (int d = 0; d < 4; d++) {
			ny = y + dy[d]; nx = x + dx[d];

			if(inRange(ny,nx) && !visited[ny][nx] && originMap[ny][nx] == 1) {
				count++;
			}
		}
		
		// 인접한 치즈 갯수가 2 1 0 이면 모서리 == 3 이상이면 남기기
		if(count > 2) newMap[y][x] = 1;
		
		// 상하좌우로 연결 치즈 이동
		for (int d = 0; d < 4; d++) {
			ny = y + dy[d]; nx = x + dx[d];
			
			if(inRange(ny,nx) && !visited[ny][nx] && originMap[ny][nx] == 1) {
				dfs(ny,nx);
			}
			
		}
		
	}
	
	static boolean inRange(int y, int x) {
		return -1 < y && y < N && -1 < x && x < M;
	}
	
	static boolean checkContinue() {
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < M; j++) {
				if(originMap[i][j] == 1) return true;
			}
		}
		
		return false;
	}

}
