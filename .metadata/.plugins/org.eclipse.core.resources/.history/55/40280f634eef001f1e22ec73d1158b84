package greedy_0220;

import java.io.BufferedReader;

/*
 * N / 2 를 분할정복, 재귀를 통해서 1이면 DFS 로 연결, 
 * 		if(!visited && 1이면 들어가기)
 * 			count_1 ++;
 * 			visitied = true
 * 
 * 
 * 		상하좌우 더 이상 갈 수 없으면 끝내기
 * 
 * N^2 - 1 개수 = 0 의 개수
 */
import java.io.InputStreamReader;
import java.util.Comparator;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Main_2630_S2_색종이만들기 {
	
	static int N;
	static int[][] map;
	static boolean[][] visited;
	static int[] dy = {-1,0,1,0}, dx = {0,1,0,-1};
	
	public static void main(String[] args) throws Exception {
		 BufferedReader in = new BufferedReader(new InputStreamReader(System.in));

		 N = Integer.parseInt(in.readLine());
		 
		 map = new int[N][N];
		 visited = new boolean[N][N];
		 
		 for (int i = 0; i < N; i++) {
			StringTokenizer st = new StringTokenizer(in.readLine());
			
			for (int j = 0; j < N; j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		 
		 int count_1 = 0;
		 for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				
				if(!visited[i][j] && map[i][j] == 1) {
					count_1 ++;
					
					
				}
			}
		}
	    
	}
	
	static void dfs(int y, int x) {
		visited[y][x] = true;
		
		for (int d = 0; d < 4; d++) {
			int ny = y + dy[d], nx = x + dx[d];
			
			//     범위 내               방문 X              1이면
			if(inRange(ny,nx) && !visited[ny][nx] && map[ny][nx] == 1) {
				dfs(ny,nx);
			}
		}
	}
	
	static boolean inRange(int y, int x) {
		return 0<= y && y < N && 0<= x && x <N;
	}

}
