package graph_0219;

import java.io.*;
import java.util.StringTokenizer;

/*
 * 2차 - 비트마스크 추가
 */
public class Main_1987_알파벳 {

	static int R,C;
	static int[][] map;
	static boolean[] visited;
	static int[] dy = {-1,1,0,0}, dx = {0,0,-1,1};
	static int answer;
	
	public static void main(String[] args) throws Exception {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		
		R = Integer.parseInt(st.nextToken());
		C = Integer.parseInt(st.nextToken());
		
		map = new int[R][C];
		visited = new boolean[26];
		answer = 0;
		
		for (int i = 0; i < R; i++) {
			String line = br.readLine();
			
			for (int j = 0; j < C; j++) {
				map[i][j] = line.charAt(j);
			}
		}
		
		dfs(0,0,1);
		System.out.println(answer);
	}
	
	static void dfs(int y, int x, int cnt) {
		
		answer = Math.max(answer, cnt);
		
		char cur = map[y][x];
//		System.out.println("y = " + y + "  x = " + x + "  cur = " + cur + "  cnt = " + cnt);
		
		visited[cur - 'A'] = true;
		
		for (int d = 0; d < 4; d++) {
			int ny = y + dy[d] , nx = x + dx[d];
			
			if(inRange(ny,nx) && !visited[map[ny][nx]-'A']) {
				dfs(ny,nx,cnt+1);
				visited[map[ny][nx] - 'A'] = false;
			}
		}
	}
	
	static boolean inRange(int y, int x) {
		return -1 < y && y < R && -1 < x && x < C;
	}

}


/*
 * 15448 kb	896 ms	
 */
//public class Main_1987_알파벳 {
//
//	static int R,C;
//	static char[][] map;
//	static boolean[] visited;
//	static int[] dy = {-1,1,0,0}, dx = {0,0,-1,1};
//	static int answer;
//	
//	public static void main(String[] args) throws Exception {
//		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
//		StringTokenizer st = new StringTokenizer(br.readLine());
//		
//		R = Integer.parseInt(st.nextToken());
//		C = Integer.parseInt(st.nextToken());
//		
//		map = new char[R][C];
//		visited = new boolean[26];
//		answer = 0;
//		
//		for (int i = 0; i < R; i++) {
//			String line = br.readLine();
//			
//			for (int j = 0; j < C; j++) {
//				map[i][j] = line.charAt(j);
//			}
//		}
//		
//		dfs(0,0,1);
//		System.out.println(answer);
//	}
//	
//	static void dfs(int y, int x, int cnt) {
//		
//		answer = Math.max(answer, cnt);
//		
//		char cur = map[y][x];
////		System.out.println("y = " + y + "  x = " + x + "  cur = " + cur + "  cnt = " + cnt);
//		
//		visited[cur - 'A'] = true;
//		
//		for (int d = 0; d < 4; d++) {
//			int ny = y + dy[d] , nx = x + dx[d];
//			
//			if(inRange(ny,nx) && !visited[map[ny][nx]-'A']) {
//				dfs(ny,nx,cnt+1);
//				visited[map[ny][nx] - 'A'] = false;
//			}
//		}
//	}
//	
//	static boolean inRange(int y, int x) {
//		return -1 < y && y < R && -1 < x && x < C;
//	}
//
//}
