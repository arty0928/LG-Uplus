import java.util.*;
import java.io.*;

public class ps_test_2 {
    static int N, M;
    static class Edge implements Comparable<Edge>{
        int from;
        int to;
        int price;
        public Edge(int from, int to, int price){
            this.from = from;
            this.to = to;
            this.price = price;
        }
        public int compareTo(Edge e){
            return Integer.compare(this.price, e.price);
        }
    }
    static Edge[] network;
    static int[] parents;


    public static void make() {
        for(int i = 0; i<N; i++){
            parents[i] = i;
        }
    }
    public static int find(int a){
        if(parents[a] == a) return a;
        return parents[a] = find(parents[a]);
    }

    public static boolean union(int a,int b){
        int aRoot = find(a);
        int bRoot = find(b);

        if(aRoot == bRoot) return false;
        parents[aRoot] = bRoot;
        return true;
    }


    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N =  Integer.parseInt(st.nextToken());

        st = new StringTokenizer(br.readLine());
        M =  Integer.parseInt(st.nextToken());

        network = new Edge[M];
        for (int i = 0; i < M; i++) {
            st = new StringTokenizer(br.readLine(), " ");
            int from = Integer.parseInt(st.nextToken());
            int to = Integer.parseInt(st.nextToken());
            int price = Integer.parseInt(st.nextToken());
            network[i] = new Edge(from, to, price);
        }

        parents = new int[N+1];
        make();
        Arrays.sort(network);

//        System.out.println(Arrays.toString(parents));
        int total_price = 0;
        int cnt = 0;

        for( Edge e: network) {
            if (union(e.from, e.to)) {
                total_price += e.price;
                if (++cnt ==  N-1) break;
            }
        }

        System.out.println(total_price);

    }
}
