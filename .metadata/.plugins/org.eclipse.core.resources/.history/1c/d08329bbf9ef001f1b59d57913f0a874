package graph_0219;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
/**
 * - map을 구역 나누기 문제 
 *   - 같은 구역인 경우 count세기 
 *   - 모든 노드를 1번씩만 탐색하기 때문에 dfs, bfs 모두 가능 
 *   - 전체 맵을 반복하면서 
 *     방문하지 않은 노드라면 그 노드 부터 같은 구역인지 (dfs, bfs) 탐색하기 
 *     
 * - 적녹색약
 *   1. 비적녹색약인을 위한 버전으로 구역 탐색하고 
 *   2. 적녹색약인을 위해 visits 초기화 하고
 *      map의 정보를 G->R로 바꾸거나 R->G으로 바꾼후 구역 탐색하기 
 */

/*
 * DFS 
 */
public class Main_10026_G5_적록색약 {
	static int N;
    static char map[][];
    static boolean visits[][];
    static int dr[] = {-1,0,0,1};
    static int dc[] = {0,1,-1,0};
 
    public static void main(String args[]) throws Exception{
 
        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
        N = Integer.parseInt(in.readLine());
        map = new char[N][N];
        visits = new boolean[N][N];
 
        for (int i=0; i<N; i++){
        	// toCharArray() : 문자열을 문자 배열로 변환하는 함수
        	map[i] = in.readLine().toCharArray();
        }
    }
 
    public static void dfs(int r, int c ){
        
    }
    
    static boolean inRange(int y, int x, int N) {
    	return -1<y && y < N && -1 < x && x < N;
    }
}
